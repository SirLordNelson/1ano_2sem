#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <math.h>

// Array's com a informação a ser usada
double expected[] = {43.31, 10.56, 23.13, 17.25, 56.88, 9.24, 12.59, 15.31, 38.45, 1.00, 5.61,
                     27.98, 15.36, 33.92, 36.51, 16.14, 1.00, 38.64, 29.23, 35.43, 18.51, 5.13,
                     6.57, 1.48, 9.06, 1.39};

int freq[26] = {0};

// Função que aplica a fórmula dada
double partial(double expected, int freq){
    return pow((expected - freq), 2) / expected;
}

// Função Principal
int main(){
    printf("    Wplgp xj wzypwtypdd fymczvpy!—bfte esp mfde lmzgp xj ozzc!\n");
    char texto[10000] = "    Wplgp xj wzypwtypdd fymczvpy!fte esp mfde lmzgp xj ozzc!";
    //assert(fgets(texto, sizeof(texto), stdin) != NULL); // verifica se existe texto
    printf("%s", texto);

    // Atualização da freq de cada letra da mensagem
    for(int i = 0; texto[i] != '\0'; i++) { // aqui está a contar cada letra do texto
        if(texto[i] >= 'a' && texto[i] <= 'z')
            freq[texto[i] - 'a']++;
        else freq[texto[i] - 'A']++;
    }

    // Uso da fórmula e Definição da chave
    double Parcial = 10000;
    int chave = 0;
    double somaparcial;

    for(int i = 0; i < 26; i++){
        somaparcial = 0;
        //printf("%d\nLetter  Freq   Expected    Partial\n", i);
        for(int j = 0; j < 26; j++){ // vai calcular a parte "Parcial" de cada letra
            somaparcial = somaparcial + partial(expected[j], freq[(26 + j - i) % 26]); // isto traduz o somatório da fórmula
            //printf("%c   %d %d   %f\n", 'A'+j, (26 + j - i) % 26, freq[(26 + j - i) % 26], expected[j]);
        }
        //printf("%f\n\n", somaparcial);
        if(somaparcial < Parcial){
            Parcial = somaparcial; // definição da substituição mais pequena
            chave = i;
        }
    }
    printf("%d ", chave);

    // Função que usa a Cifra de César
    for(int i = 0; texto[i] != '\0'; i++) {
        if(texto[i] >= 'A' && texto[i] <= 'Z')
            //texto[i] = (((texto[i] - 'A') + chave) % 26) + 'A';
            printf("%c", (((texto[i] - 'A') + chave) % 26) + 'A');
        else if(texto[i] >= 'a' && texto[i] <= 'z')
            //texto[i] = (((texto[i] - 'a') + chave) % 26) + 'a';
            printf("%c", (((texto[i] - 'a') + chave) % 26) + 'a');
        else printf("%c", texto[i]);
        //printf("%c", texto[i]);
    }
    return 0;
}